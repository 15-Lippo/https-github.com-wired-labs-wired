generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

// Analytics
model ViewEvent {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  Publication   Publication @relation(fields: [publicationId], references: [id])
  publicationId String
}

// Publications
model Publication {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner  String
  type   PublicationType
  lensId String?

  ViewEvents ViewEvent[]
  viewCount  Int         @default(0)

  Project Project[]
}

enum PublicationType {
  SPACE
  AVATAR
}

// Projects
model Project {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner String

  name        String?
  description String?
  editorState String?

  files File[]

  Publication   Publication? @relation(fields: [publicationId], references: [id])
  publicationId String?
}

model File {
  id Int @id @default(autoincrement())

  storageKey String

  projectId String
  Project   Project? @relation(fields: [projectId], references: [id])
}

// Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
